#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('backend:server')
const http = require('http')
const { Server } = require('socket.io')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

// socket io

const io = new Server(server, {
  cors: {
    origin: 'http://localhost:5173',
    credentials: true
  }
})
const activeConnections = []
io.on('connection', (socket) => {
  console.log(socket.id)

  socket.on('connectMessage', (data) => {
    // data
    //  { connectEmail: 'test@gmail.com',
    //   socketId: 'BIDKY1PyV9XenF_uAAAI',
    //   targetEmail: 'test2@gmail.com' }
    console.log(data)
    activeConnections.push(data) // add active when user connect
    console.log(activeConnections.length)
  })

  socket.on('disconnect', () => {
    console.log('user disconnected')
    const index = activeConnections.findIndex((connection) => connection.socketId === socket.id)
    if (index !== -1) {
      activeConnections.splice(index, 1)
    }
  })

  socket.on('refetchReminderTarget', (data) => {
    // data
    //  { connectEmail: 'test@gmail.com',
    //   socketId: 'BIDKY1PyV9XenF_uAAAI',
    //   targetEmail: 'test2@gmail.com' }
    console.log(activeConnections)

    console.log(activeConnections.length)
    console.log(data)

    const isTargetEmailConnected = activeConnections.some((connection) => connection.connectEmail === data.targetEmail)

    if (isTargetEmailConnected) {
      const targetSocket = activeConnections.find((connection) => connection.connectEmail === data.targetEmail)
      io.to(targetSocket.socketId).emit('newMessageNeedRefetchReminder', true)
      io.to(data.socketId).emit('newMessageNeedRefetchReminder', true)
    }
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
